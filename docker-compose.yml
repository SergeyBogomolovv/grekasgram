version: "3.8"
name: grekasgram
services:
  front:
    depends_on:
      - api
    build: 
      context: ./front
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
        - JWT_SECRET=$JWT_SECRET
    env_file: .env
    environment:
      - PORT=3000
    ports:
      - 3000:3000
    networks:
      - internal
    restart: unless-stopped

  api:
    depends_on:
      - postgres
      - redis
      - migrations
    build: 
      context: ./api
      target: production
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - 4000:4000
    networks:
      - internal
    restart: unless-stopped
    
  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    networks:
      - internal
    restart: unless-stopped

  redis:
    image: redis
    volumes:
      - redis_data:/var/lib/data
    networks:
      - internal
    restart: unless-stopped

  migrations:
    build: 
      context: ./api
      target: migration
      dockerfile: Dockerfile
    depends_on:
      - postgres
    env_file: .env
    networks:
      - internal
    restart: "no"

  proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    depends_on:
      - front
      - api
    ports:
      - "80:80"
    networks:
      - internal
      - external
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet; sleep 12h & wait $${!}; done;'"
    networks:
      - external

volumes:
  postgres_data:
  redis_data:

networks:
  internal:
    name: internal
    driver: bridge
  external:
    name: external
    driver: bridge